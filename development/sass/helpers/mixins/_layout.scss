////
/// Layout related mixins
/// @group Mixins
////

/// Control element's aspect ratio
/// @param {number} width - The width
/// @param {number} height - The height
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  >.content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

/// Create a single media condition out of a map of queries
/// @param {String} queries - The queries
@mixin media($queries) {
  @if length($queries) == 0 {
    @content;
  }
  @else {
    $first-key: nth(map-keys($queries), 1);
    @media ($first-key: map-get($queries, $first-key)) {
      $queries: map-remove($queries, $first-key);

      @include media($queries) {
        @content;
      }
    }
  }
}

/// Gets the media query from the Media Queries List Configured in `$msuxf-breakpoints`
/// @param {String} breakpoint - The breakpoint to search on `$msuxf-breakpoints` List
@mixin respond-to($breakpoint) {
  // Get the query map for $msuxf-breakpoints map
  $queries: map-get($msuxf-breakpoints, $breakpoint);

  // If there is no query called $breakpoint in map, throw an error
  @if not $queries {
    @error "No value could be retrieved from `#{$breakpoint}`. Please make sure it is defined in `$msuxf-breakpoints` map.";
  }

  // Include the media mixin with $queries
  @include media($queries) {
    @content;
  }
}